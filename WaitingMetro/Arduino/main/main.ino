
#include "LedControl.h" // 라이브러리 사용 선언


// Din 핀을 12번, ClK핀을 11번 CS핀을 10번에 연결, 매트릭스는 4개를 사용 선언
LedControl lc=LedControl(12,11,10,4);
int num;

bool buttonState = false;
bool rightState = false;
bool leftState = false;
int mode = 1;
int nowStation = 0;
int arriveStation = -1;
byte rkr[] = { B01111010,B00001011,B00001010,B00001010,B00000000,B00011110,B00000010,B00000010};
byte wl[] = { B00000001,B01111101,B00010001,B00101001,B01000101,B00000001,B00000001,B00000000};
byte di[] = { B00000010,B00110011,B01001010,B01001011,B00110010,B00000010,B00000010,B00000000};
byte eh[] = { B00000000,B00111110,B00100000,B00100000,B00111110,B00001000,B01111111,B00000000};
byte tks[] = { B00100010,B00100010,B01010011,B11011010,B00000010,B00100010,B00100000,B00111100};
byte qhs[] = { B00100100,B00111100,B00100100,B00111100,B00010000,B01111110,B00100000,B00111110};
byte rma[] = { B00111110,B00000010,B00000010,B01111111,B00000000,B00111110,B00100010,B00111110};
byte wjd[] = { B01111101,B00010001,B00101011,B01000101,B00001101,B00010010,B00010010,B00001100};
byte qja[] = { B01010010,B01110110,B01010010,B01110010,B00000010,B00011100,B00010100,B00011100};
byte vud[] = { B01111101,B00101011,B00101001,B01111111,B00000001,B00011101,B00100010,B00011100};
byte chs[] = { B00001000,B00111110,B00011100,B00110110,B00001000,B01111111,B00100000,B00111110};
byte dls[] = { B00110010,B01001010,B01001010,B00110010,B00000010,B00010000,B00010000,B00011110};
byte ejr[] = { B01111010,B01000010,B01001110,B01111010,B00000000,B00011110,B00000010,B00000010};
byte qn[] = { B00100100,B00111100,B00100100,B00111100,B00000000,B01111110,B00001000,B00001000};
byte rhk[] = { B01111010,B00001010,B00001011,B00101010,B00100010,B01111110,B00000010,B00000000};
byte cjs[] = { B00010001,B01111101,B00010011,B00101001,B01000101,B00010000,B00010000,B00011110};
byte cjd[] = { B00010001,B01111101,B00010011,B00101001,B01000101,B00001110,B00010001,B00001110};
byte tk[] = { B00100010,B00100010,B01010010,B10001011,B00000010,B00000010,B00000010,B00000000};
byte rhd[] = { B00111110,B00000010,B00000010,B00001000,B01111111,B00011100,B00100010,B00011100};
byte rud[] = { B01111001,B00001011,B00001001,B00001011,B00000001,B00001110,B00010001,B00001110};
byte ak[] = { B00000010,B01111010,B01001011,B01001010,B01111010,B00000010,B00000010,B00000000};
byte tjs[] = { B00010001,B00101011,B00101001,B01000101,B00000001,B00010001,B00010000,B00011111};
byte qk[] = { B01001010,B01001010,B01111011,B01001010,B01111010,B00000010,B00000010,B00000000};
byte dnl[] = { B00011001,B00100101,B00100101,B00011001,B00000001,B00111111,B00001001,B00001001};
byte ska[] = { B00100010,B00100010,B00100011,B00111110,B00000010,B00011110,B00010010,B00011110};
byte xo[] = { B00000101,B11110101,B10000111,B11110101,B10000101,B11110101,B00000101,B00000101};
byte fud[] = { B01111001,B00001011,B01111001,B01000011,B01111001,B00011101,B00100010,B00011100};
byte chd[] = { B00001000,B00111110,B00010100,B00101010,B01111111,B00011100,B00100010,B00011100};
byte wkr[] = { B01111010,B00010010,B00101011,B01101110,B00000010,B00111110,B00000010,B00000010};
byte dl[] = { B00000001,B00111001,B01000101,B01000101,B00111001,B00000001,B00000001,B00000001};
byte dyd[] = { B00011100,B00100010,B00011100,B00010100,B01111111,B00011100,B00100010,B00011100};
byte qks[] = { B01001010,B01001010,B01111011,B01001010,B01111010,B00010010,B00010000,B00011111};
byte fhr[] = { B00111110,B00111110,B00111110,B00001000,B01111111,B00111110,B00000010,B00000010};
byte ekd[] = { B01111010,B01000010,B01000011,B01111010,B00001100,B00010010,B00010010,B00001100};
byte rh[] = { B00111110,B00000010,B00000010,B00001000,B00001000,B01111111,B00000000,B00000000};
byte ro[] = { B00000101,B11110101,B00010101,B00010111,B00010101,B00010101,B00000101,B00000000};
byte tkd[] = { B00100010,B00100010,B01010011,B10001010,B00001100,B00010010,B00010010,B00001100};
byte rP[] = { B00000101,B11110101,B00011101,B00010101,B00011101,B00010101,B00000101,B00000101};
byte sh[] = { B00100000,B00100000,B00100000,B00111110,B00001000,B00001000,B01111111,B00000000};
byte dnjs[] = { B00110000,B01001010,B00110010,B00000010,B01111010,B00010110,B00100010,B00111100};
byte ckd[] = { B00100010,B11111010,B00100011,B01010010,B00000010,B00011000,B00100100,B00011000};
byte ehd[] = { B00111100,B00100000,B00111100,B00001000,B01111111,B00001000,B00010100,B00001000};
byte Tkd[] = { B01010010,B01010010,B10101011,B00000010,B00011000,B00100100,B00100100,B00011000};
byte ans[] = { B00111100,B00100100,B00111100,B00000000,B11111111,B00001000,B00100000,B00111100};
byte tn[] = { B00001000,B00001000,B00010100,B00100010,B00000000,B01111111,B00001000,B00001000};
byte db[] = { B00011100,B00100010,B00100010,B00011100,B00000000,B01111111,B00010100,B00010100};
byte al[] = { B00000010,B00000010,B01111010,B01001010,B01001010,B01111010,B00000010,B00000010};
byte dk[] = { B00000010,B00000010,B00110010,B01001010,B01001011,B00110010,B00000010,B00000010};
byte tka[] = { B00010010,B00010010,B00101011,B01000110,B00000010,B00011110,B00010010,B00011110};
byte rj[] = { B00000010,B01111010,B00001010,B00001110,B00001010,B00001010,B00000010,B00000010};
byte fl[] = { B00000010,B01111010,B00001010,B01111010,B01000010,B01111010,B00000010,B00000010};
byte rlf[] = { B01111010,B00001010,B00001010,B00011110,B00000010,B00011110,B00010000,B00011110};
byte dma[] = { B00011000,B00100100,B00011000,B01111110,B00000000,B00111100,B00100100,B00111100};
byte tjd[] = { B00100010,B00100010,B01010110,B10001010,B00000010,B00011000,B00100100,B00011000};
byte tls[] = { B00010010,B00010010,B00101010,B01000110,B00000010,B00010000,B00010000,B00011110};
byte du[] = { B00000010,B00110010,B01001110,B01001010,B00110110,B00000010,B00000010,B00000010};
byte eo[] = { B00000101,B11110101,B10000101,B10000101,B10000111,B11110101,B00000101,B00000101};
byte dlq[] = { B00110010,B01001010,B00110010,B00000010,B00010010,B00011110,B00010010,B00011110};
byte rn[] = { B00111110,B00000010,B00000010,B00000010,B00000000,B01111111,B00001000,B00001000};
byte gks[] = { B00100010,B11111010,B00100011,B01010010,B00100010,B00000000,B00100000,B00111110};
byte tj[] = { B00000010,B00100010,B00100010,B00101110,B01010010,B10001010,B00000010,B00000010};
byte dnf[] = { B00011000,B00100100,B00011000,B01111110,B00001000,B00111100,B00111100,B00111100};
byte dur[] = { B00110001,B01001111,B01001001,B00110111,B00000001,B00011110,B00000010,B00000010};
byte tnr[] = { B00001000,B00010100,B00100010,B00000000,B01111111,B00001000,B00111110,B00000010};
byte wks[] = { B11111010,B00100010,B01010011,B10001010,B00000000,B00100000,B00100000,B00111110};
byte eks[] = { B01111010,B01000010,B01000011,B01111010,B00000000,B00100000,B00100000,B00111110};
byte dks[] = { B00110010,B01001010,B01001011,B00110010,B00000010,B00100000,B00100000,B00111110};
byte dhs[] = { B00011100,B00100010,B00011100,B00001000,B01111111,B00000000,B00100000,B00111110};
byte dhkd[] = { B00110010,B01001010,B00110011,B00010010,B01111110,B00001100,B00010010,B00001100};
byte dh[] = { B00011100,B00100010,B00100010,B00011100,B00001000,B00001000,B01111111,B00000000};
byte dnjf[] = { B00110010,B01001010,B00110110,B01111010,B00010010,B00111110,B00111110,B00111110};
byte wnd[] = { B00111110,B00001000,B00010100,B01111111,B00001000,B00011100,B00100010,B00011100};
byte dkd[] = { B00110010,B01001010,B01001011,B00110010,B00000010,B00001100,B00010010,B00001100};
byte dkv[] = { B00110010,B01001010,B01001011,B00110010,B00000010,B00111110,B00010100,B00111110};
byte gP[] = { B01000101,B11110101,B00001101,B01100101,B10011101,B01100101,B00000101,B00000101};
byte ghk[] = { B00100010,B11111010,B00100010,B01010010,B00100011,B00100010,B11111010,B00000010};
byte dns[] = { B00011100,B00100010,B00011100,B00000000,B01111111,B00001000,B00100000,B00111110};
byte wkd[] = { B01111110,B00010010,B00101011,B01000110,B00000010,B00011100,B00100010,B00011100};
byte cnd[] = { B00001000,B00111110,B00001000,B00010100,B01111111,B00001000,B00010100,B00001000};
byte an[] = { B00111110,B00100010,B00100010,B00111110,B00000000,B01111111,B00001000,B00001000};
byte fh[] = { B00111110,B00000010,B00111110,B00100000,B00111110,B00001000,B01111111,B00000000};
byte aud[] = { B01111110,B00010010,B00101011,B01000110,B00000010,B00011100,B00100010,B00011100};
byte ghl[] = { B01111110,B00010010,B00101011,B01000110,B00000010,B00011100,B00100010,B00011100};
byte gus[] = { B01111110,B00010010,B00101011,B01000110,B00000010,B00011100,B00100010,B00011100};
byte ch[] = { B01111110,B00010010,B00101011,B01000110,B00000010,B00011100,B00100010,B00011100};
byte space[] = { B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000};
byte d[] = { B01111000,B01000100,B01000010,B01000010,B01000010,B01000010,B01000100,B01111000};
byte p[] = { B01111100,B01000010,B01000010,B01111100,B01000000,B01000000,B01000000,B01000000};

byte* stationArr[46][4] = {{ekd,rh,ro,space},{space,tkd,rP,space},{space,sh,dnjs,space},{space,ckd,ehd,space},{space,Tkd,ans,space},{space,tn, db,space},
{space,al,dk,space},{al,dk,rj,fl},{space,rlf,dma,space},{tjd,tls,du,eo},{gks,tjd,eo,space},{gP,tjd,eo,space},{ehd,eo,ans,space},{d,d,p,space},
{cnd,an,fh,space},{space,aud,ehd,space},{space,ghl,gus,space},{tj,dnf,dur,space},{tnr,eo,dlq,rn},{tka,rkr,wl,space},{eo,di,al,space},{space,tks,qhs,space},
{space,rma,wjd,space},{space,qja,rP,space},{space,vud,chs,space},{dls,ejr,dnjs,space},{wjd,qn,cjd,tk},{eo,rhd,dnjs,space},{rud,ak,rhd,dnjs},{tjs,qk,dnl,space},
{ska,xo,fud,space},{space,tk,ekd,space},{chd,tls,eo,space},{ehd,wkr,space,space},{dl,chs,space,space},{tls,dyd,tks,space},{qks,dnjf,space,space},{tkd,fhr,tn,space},
{gks,eo,dkv,space},{space,wnd,dkd,space},{space,rh,wks,space},{space,ch,wl,space},{space,dks,tks,space},{tls,rlf,dhs,cjs},{space,wjd,dhkd,space},{dh,dl,eh,space}};

void setup() {  
  Serial.begin(9600);
   for(num=0; num<4; num++) // 매트릭스 0번부터 3번까지 세팅
  {
   lc.shutdown(num,false); // 0 ~3번까지 매트릭스 절전모드 해제
   lc.setIntensity(num,8); // 매트릭스의 밝기 선언 0~15의 수
   lc.clearDisplay(num); // 매트릭스 led를 초기화
  }
  pinMode(4,INPUT_PULLUP);
  pinMode(5,INPUT_PULLUP);
  pinMode(6,INPUT_PULLUP);
}
void moveStation(int direction){ //오른쪽: 1, 왼쪽: -1
    if(arriveStation==45&&direction==1){ //마지막 인덱스, 오른쪽
        return 0;
    }else if(arriveStation==0&&direction==-1){ //첫번째 인덱스, 왼쪽
        return 0;
    }else{
        arriveStation+=direction;
    }
}
void printLC(int stationIndex){
    for(int j=0;j<4;j++){ //
            for(int k=0; k<8;k++){
            lc.setRow(j,k,stationArr[stationIndex][j][k]);
            }
        }
}
void loop() {
  int i =1;
  if(mode==1){ //빈 자리 상태
    while(not Serial.available()){ //서버가 값을 전송할 때까지 대기
        printLC(nowStation);
        if(!digitalRead(4)){ //버튼 눌리면 모드 전환
            Serial.println("mode changed");
            delay(500);
            mode = 2;
            return 0;
        }
    }
      nowStation = (Serial.readStringUntil("\n")).toInt(); //현재 역 갱신
    Serial.println(nowStation);
  }else if(mode==2){ //앉음 상태
    arriveStation = nowStation; //앉을 역을 현재 역으로 초기화
    while(digitalRead(4)){ //원 버튼이 눌릴 때까지 대기(확인 버튼)
        if(!digitalRead(6)){ //오른쪽 이동
            moveStation(1);
        }else if(!digitalRead(5)){ //왼쪽 이동
            moveStation(-1);
        }
        printLC(arriveStation); //출력
        delay(100);
    }
    Serial.print(arriveStation);
    while(arriveStation!=nowStation){ //해당 역에 도착할 때까지 대기
        printLC(arriveStation); //도착 역 출력
        if(Serial.available()){ 
            nowStation = (int)Serial.read(); //현재 역 갱신
        }
    }
    mode = 1; //역에 도착하면 모드 전환
    return 0;
  }
    
}